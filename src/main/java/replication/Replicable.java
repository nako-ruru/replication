package replication;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * An annotation that indicates the method call will fire an internal replication events.
 * The events will be fired to other non-leader nodes in order that other nodes will do same operations with the leader.
 */
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
public @interface Replicable {

    /**
     * A flag which describe the method signature.
     *
     * An internal method signature will be generated by default if value is empty.
     * You can also define your own signature as long as it won't be conflicted with others.
     */
    String value() default "";

    /**
     * Time duration indicates that how long the replication events is alive in seconds.
     *
     * A <code>ttl</code> can be used on condition of plenty of short-lived events.
     * Short-lived events can reduce memory cost of redis and time cost on startup.
     */
    long ttl() default -1;

    /**
     * Same with {@link #ttl()} except that this method uses duration expression.
     * @see org.springframework.boot.convert.DurationStyle
     */
    String ttlExpression() default "";

    /**
     * A flag indicates this event will reset current.
     *
     * A <code>reset</code> will discards all old events, thus, it can reduce memory cost of redis and time cost on startup.
     */
    boolean reset() default false;

    /**
     * A boolean flag indicates replication events should not be fired.
     *
     * An <code>exclusive</code> can be used on condition that
     * a class has been annotated <code>{@link Replicable}</code>, but one of its method should not fire replication events.
     */
    boolean exclusive() default false;
}

